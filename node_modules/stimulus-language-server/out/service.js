"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Service = void 0;
const vscode_html_languageservice_1 = require("vscode-html-languageservice");
const stimulus_html_data_provider_1 = require("./data_providers/stimulus_html_data_provider");
const settings_1 = require("./settings");
const document_service_1 = require("./document_service");
const diagnostics_1 = require("./diagnostics");
const definitions_1 = require("./definitions");
const commands_1 = require("./commands");
const code_actions_1 = require("./code_actions");
const stimulus_parser_1 = require("stimulus-parser");
class Service {
    constructor(connection, params) {
        this.connection = connection;
        this.settings = new settings_1.Settings(params, this.connection);
        this.documentService = new document_service_1.DocumentService(this.connection);
        this.project = new stimulus_parser_1.Project(this.settings.projectPath.replace("file://", ""));
        this.codeActions = new code_actions_1.CodeActions(this.documentService, this.project);
        this.stimulusDataProvider = new stimulus_html_data_provider_1.StimulusHTMLDataProvider("id", this.project);
        this.diagnostics = new diagnostics_1.Diagnostics(this.connection, this.stimulusDataProvider, this.documentService);
        this.definitions = new definitions_1.Definitions(this.documentService, this.stimulusDataProvider);
        this.commands = new commands_1.Commands(this.project, this.connection);
        this.htmlLanguageService = (0, vscode_html_languageservice_1.getLanguageService)({
            customDataProviders: [this.stimulusDataProvider],
        });
    }
    async init() {
        await this.project.analyze();
        // Only keep settings for open documents
        this.documentService.onDidClose((change) => {
            this.settings.documentSettings.delete(change.document.uri);
        });
        // The content of a text document has changed. This event is emitted
        // when the text document first opened or when its content has changed.
        this.documentService.onDidChangeContent((change) => {
            this.diagnostics.refreshDocument(change.document);
        });
    }
    async refresh() {
        await this.project.analyze();
        this.diagnostics.refreshAllDocuments();
    }
}
exports.Service = Service;
//# sourceMappingURL=service.js.map