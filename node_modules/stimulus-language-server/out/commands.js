"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Commands = void 0;
const dedent_1 = __importDefault(require("dedent"));
const node_1 = require("vscode-languageserver/node");
const stimulus_parser_1 = require("stimulus-parser");
class Commands {
    constructor(project, connection) {
        this.project = project;
        this.connection = connection;
    }
    async updateControllerReference(identifier, diagnostic, suggestion) {
        if (identifier === undefined)
            return;
        if (diagnostic === undefined)
            return;
        if (suggestion === undefined)
            return;
        const { textDocument, range } = diagnostic.data;
        const document = { uri: textDocument._uri, version: textDocument._version };
        const textEdit = { range, newText: suggestion };
        const documentChanges = [node_1.TextDocumentEdit.create(document, [textEdit])];
        await this.connection.workspace.applyEdit({ documentChanges });
    }
    async createController(identifier, diagnostic, controllerRoot) {
        if (identifier === undefined)
            return;
        if (diagnostic === undefined)
            return;
        if (controllerRoot === undefined)
            controllerRoot = this.project.controllerRoot;
        const path = stimulus_parser_1.ControllerDefinition.controllerPathForIdentifier(identifier);
        const newControllerPath = `${this.project.projectPath}/${controllerRoot}/${path}`;
        const createFile = { kind: "create", uri: newControllerPath };
        await this.connection.workspace.applyEdit({ documentChanges: [createFile] });
        const documentRange = node_1.Range.create(0, 0, 0, 0);
        const textEdit = { range: documentRange, newText: this.controllerTemplateFor(identifier) };
        const textDocumentEdit = node_1.TextDocumentEdit.create({ uri: newControllerPath, version: 1 }, [textEdit]);
        await this.connection.workspace.applyEdit({ documentChanges: [textDocumentEdit] });
        await this.connection.window.showDocument({
            uri: textDocumentEdit.textDocument.uri,
            external: false,
            takeFocus: true,
        });
    }
    controllerTemplateFor(identifier) {
        return (0, dedent_1.default) `
      import { Controller } from "@hotwired/stimulus"

      export default class extends Controller {
        connect() {
          console.log("${identifier} controller connected")
        }
      }
    `;
    }
}
exports.Commands = Commands;
//# sourceMappingURL=commands.js.map