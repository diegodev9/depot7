"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Project = void 0;
const parser_1 = require("./parser");
const fs_1 = require("fs");
const glob_1 = require("glob");
class Project {
    static calculateControllerRoots(filenames) {
        const controllerRoots = [];
        filenames.forEach(filename => {
            const splits = filename.split("/");
            const controllersIndex = splits.indexOf("controllers");
            if (controllersIndex !== -1) {
                const controllerRoot = splits.slice(0, controllersIndex + 1).join("/");
                if (!controllerRoots.includes(controllerRoot)) {
                    controllerRoots.push(controllerRoot);
                }
            }
        });
        return controllerRoots.sort();
    }
    constructor(projectPath) {
        this.controllerRootFallback = "app/javascript/controllers";
        this.controllerDefinitions = [];
        this.controllerFiles = [];
        this.parser = new parser_1.Parser(this);
        this.projectPath = projectPath;
    }
    relativePath(path) {
        return path.replace(`${this.projectPath}/`, "");
    }
    relativeControllerPath(path) {
        const controllerRoot = this.controllerRootForPath(path);
        return this.relativePath(path).replace(`${controllerRoot}/`, "");
    }
    get controllerRoot() {
        return this.controllerRoots[0] || this.controllerRootFallback;
    }
    get controllerRoots() {
        return Project.calculateControllerRoots(this.controllerFiles.map(file => this.relativePath(file.filename)));
    }
    async analyze() {
        this.controllerFiles = [];
        this.controllerDefinitions = [];
        await this.readControllerFiles();
        this.controllerFiles.forEach((file) => {
            this.controllerDefinitions.push(this.parser.parseController(file.content, file.filename));
        });
    }
    controllerRootForPath(path) {
        const relativePath = this.relativePath(path);
        const relativeRoots = this.controllerRoots.map(root => this.relativePath(root));
        return relativeRoots.find(root => relativePath.startsWith(root)) || this.controllerRootFallback;
    }
    async readControllerFiles() {
        const controllerFiles = await (0, glob_1.glob)(`${this.projectPath}/**/*_controller.js`, {
            ignore: `${this.projectPath}/node_modules/**/*`,
        });
        await Promise.allSettled(controllerFiles.map(async (filename) => {
            const content = await fs_1.promises.readFile(filename, "utf8");
            this.controllerFiles.push({ filename, content });
        }));
    }
}
exports.Project = Project;
//# sourceMappingURL=project.js.map