"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Parser = void 0;
const acorn_walk_1 = require("acorn-walk");
const acorn_1 = require("acorn");
const acorn_static_class_features_1 = __importDefault(require("acorn-static-class-features"));
const acorn_private_methods_1 = __importDefault(require("acorn-private-methods"));
const acorn_class_fields_1 = __importDefault(require("acorn-class-fields"));
const controller_definition_1 = require("./controller_definition");
class Parser {
    constructor(project) {
        this.project = project;
        this.parser = acorn_1.Parser
            .extend(acorn_static_class_features_1.default)
            .extend(acorn_private_methods_1.default)
            .extend(acorn_class_fields_1.default);
    }
    parse(code) {
        return this.parser.parse(code, {
            sourceType: "module",
            ecmaVersion: 2020,
        });
    }
    parseController(code, filename) {
        try {
            const ast = this.parse(code);
            const controller = new controller_definition_1.ControllerDefinition(this.project, filename);
            (0, acorn_walk_1.simple)(ast, {
                MethodDefinition(node) {
                    if (node.kind === "method") {
                        controller.methods.push(node.key.name);
                    }
                },
                PropertyDefinition(node) {
                    const { name } = node.key;
                    if (node.value.type === "ArrowFunctionExpression") {
                        controller.methods.push(name);
                    }
                    if (name === "targets") {
                        controller.targets = node.value.elements.map((element) => element.value);
                    }
                    if (name === "classes") {
                        controller.classes = node.value.elements.map((element) => element.value);
                    }
                    if (name === "values") {
                        node.value.properties.forEach((property) => {
                            const value = property.value;
                            let type;
                            let defaultValue;
                            if (value.name && typeof value.name === "string") {
                                type = value.name;
                                defaultValue = controller_definition_1.defaultValuesForType[type];
                            }
                            else {
                                const properties = property.value.properties;
                                const convertArrayExpression = (value) => {
                                    return value.elements.map((node) => node.value);
                                };
                                const convertObjectExpression = (value) => {
                                    return Object.fromEntries(value.properties.map((property) => [property.key.name, property.value.value]));
                                };
                                const convertProperty = (value) => {
                                    switch (value.type) {
                                        case "ArrayExpression":
                                            return convertArrayExpression(value);
                                        case "ObjectExpression":
                                            return convertObjectExpression(value);
                                    }
                                };
                                const typeProperty = properties.find((property) => property.key.name === "type");
                                const defaultProperty = properties.find((property) => property.key.name === "default");
                                type = (typeProperty === null || typeProperty === void 0 ? void 0 : typeProperty.value.name) || "";
                                defaultValue = defaultProperty === null || defaultProperty === void 0 ? void 0 : defaultProperty.value.value;
                                if (!defaultValue && defaultProperty) {
                                    defaultValue = convertProperty(defaultProperty.value);
                                }
                            }
                            controller.values[property.key.name] = {
                                type: type,
                                default: defaultValue,
                            };
                        });
                    }
                },
            });
            return controller;
        }
        catch (error) {
            console.error(`Error while parsing controller in '${filename}': ${error.message}`);
            const controller = new controller_definition_1.ControllerDefinition(this.project, filename);
            controller.parseError = error.message;
            return controller;
        }
    }
}
exports.Parser = Parser;
//# sourceMappingURL=parser.js.map